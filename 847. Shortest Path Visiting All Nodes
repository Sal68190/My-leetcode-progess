class Solution {
private:
    int dfs(int i, int depth, int n_1, vector<vector<int>>& graph, vector<bool>& visited){
        int maxDepth = depth;
        visited[i] = true;
        
        for(int j : graph[i]){
            if(!visited[j]){
                maxDepth = max(maxDepth, dfs(j, depth + 1, n_1, graph, visited));
                // Can't be deeper
                if(maxDepth == n_1)
                    return maxDepth;
            }
        }
        
        visited[i] = false;
        return maxDepth;
    }
    
    int shortestPathLength(vector<vector<int>>& graph, int start, int n){
        vector<bool> visited(n, false);
        int maxDepth = dfs(start, 0, n - 1, graph, visited);
        return 2 * (n - 1) - maxDepth;
    }
    
public:
    int shortestPathLength(vector<vector<int>>& graph) {
        int n = graph.size();
        if(n == 1) return 0;
        if(n == 2) return 1;
        
        int n_1 = n - 1;
        int minLen = INT_MAX;
        for(int i = 0; i < n; ++i){
            minLen = min(minLen, shortestPathLength(graph, i, n));
            // Can't be shorter
            if(minLen == n_1)
                return minLen;
        }
        return minLen;
    }
}; 

//dfs
