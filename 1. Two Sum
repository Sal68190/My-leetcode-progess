  class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
		// Keys are the array values and values are the associated array indices
        unordered_map<int, int> hash; // Use as a hash table, instead of creating one
        vector<int> result;
        for (int i = 0; i < nums.size(); i++)
            if (hash.count(target - nums[i])) // If the partner of this value to reach the target sum has been saved already
            {
                result.push_back(hash[target - nums[i]]); // Get index of other value
                result.push_back(i);
                return result;
            }
            else // Pair has not yet been found, so save value to hash table
                hash[nums[i]] = i;
        return result;
    }
};



////////////////////
Explanation

The idea here, to make the code more efficient than a nested loop (which takes O(n^2) time), is to use a hash table - to map every value with its index as a <key, value> pair (i.e. <number, index> pair) until we reach a number which is the difference between the target and the number being currently processed (theoretically it is until we reach either that or the end of the array, but we are told we can assume that the array contains one solution). To that end, we check at every iteration whether the value equalling the target minus the current number has already been saved. This code uses an unordered_map, since it is stored as a hash table and would be most efficient for this process.

Complexity
Running Time
During each iteration, we either save a <key, value> pair to the hash table or retrieve one from it. Each such action on a hash table has a running time of O(1).
In the best-case scenario, the 2 numbers would be the first 2 values of the array, and we would get the results very fast, in O(1) time. However, in the average and worst-case scenarios, we would loop through a large part of the array, or even all of it, before we find the pair of values, resulting in a running time of O(n).

Memory
This solution saves key and value pairs for each item in the array until we find the required indices, if they exist. The hash map uses O(n) space.
